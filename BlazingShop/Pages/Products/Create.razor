@page "/products/create"
@using Microsoft.EntityFrameworkCore
@inject AppDbContext _context

<h1>New Product</h1>

@* Usar EditForm que é um taghelper do blazor que traz boas funcionalidades
para gerenciar formulario *@

@* Model="" do EditForm vincula ao modelo que foi especificado no @code
    tudo que for editado no seu _model será refletido no EditForm e vice-versa (two-way-binding)
 *@
<EditForm Model="_model" OnValidSubmit="@HandleSubmitAsync">

    @* 
        Todas as validaçoes informadas no model serão feitas
        para mostrar esses erros utilizar essas tags abaixo
     *@
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="Title" class="form-label">Title</label>
        @* Fazendo o binding da propriedade Title do modelo passado (Product) *@
        <InputText class="form-control" type="text" id="title" @bind-Value="_model.Title" />
    </div>
    <div class="mb-3">
        <label for="Price" class="form-label">Price</label>
        @* Fazendo o binding da propriedade Price do modelo passado (Product) *@
        <InputNumber class="form-control" type="number" id="Price" @bind-Value="_model.Price" />
    </div>

    <div class="mb-3">
        <label for="CategoryId" class="form-label">Categories</label>
        <InputSelect id="CategoryId" @bind-Value="_model.CategoryId" class="form-control">
            @foreach (var category in _categories)
            {
                <option value="@category.Id">@category.Title</option>
            }
        </InputSelect>
    </div>

    @if(!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @_errorMessage
        </div>
    }

    <button class="btn btn-success" type="submit">
        SAVE
    </button>
</EditForm>

@code {
    private Product _model = new();
    private List<Category> _categories = new();
    private string? _errorMessage = null;

    protected override async Task OnInitializedAsync() {
        _categories = await _context
            .Categories
            .AsNoTracking()
            .ToListAsync();
        
        _model.CategoryId = _categories[0].Id;
    }
    async Task HandleSubmitAsync()
    {
        try
        {
            await _context.Products.AddAsync(_model);
            await _context.SaveChangesAsync();

            _model = new Product();
        }
        catch
        {
            _errorMessage = "Falha ao persistir os dados";
        }
    }

}